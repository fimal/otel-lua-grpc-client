// Generated by the lua-protobuf compiler
// You shouldn't edit this file manually
//
// source proto file: opentelemetry/proto/logs/v1/logs.proto

#include "opentelemetry/proto/logs/v1/logs.pb-lua.h"

#ifdef __cplusplus
extern "C" { // make sure functions treated with C naming
#endif

#include <lauxlib.h>

#ifdef __cplusplus
}
#endif

#include <string>

// this represents Lua udata for a protocol buffer message
// we record where a message came from so we can GC it properly
typedef struct msg_udata { // confuse over-simplified pretty-printer
    ::google::protobuf::Message * msg;
    bool lua_owns;
    lua_protobuf_gc_callback gc_callback;
    void * callback_data;
} msg_udata;

#include "opentelemetry/proto/common/v1/common.pb-lua.h"

#include "opentelemetry/proto/resource/v1/resource.pb-lua.h"

using ::std::string;

int lua_protobuf_opentelemetry_proto_logs_v1_open(lua_State *L)
{
    const char *table = luaL_findtable(L, LUA_GLOBALSINDEX, "protobuf.opentelemetry.proto.logs.v1", 1);
    if (table) {
        return luaL_error(L, "could not create parent Lua tables");
    }
    if (!lua_istable(L, -1)) {
        lua_newtable(L);
        lua_setfield(L, -2, "opentelemetry.proto.logs.v1");
    }
    // SeverityNumber enum
    lua_newtable(L); // proxy table
    lua_newtable(L); // main table
    lua_pushnumber(L, 0);
    lua_setfield(L, -2, "SEVERITY_NUMBER_UNSPECIFIED");
    lua_pushnumber(L, 1);
    lua_setfield(L, -2, "SEVERITY_NUMBER_TRACE");
    lua_pushnumber(L, 2);
    lua_setfield(L, -2, "SEVERITY_NUMBER_TRACE2");
    lua_pushnumber(L, 3);
    lua_setfield(L, -2, "SEVERITY_NUMBER_TRACE3");
    lua_pushnumber(L, 4);
    lua_setfield(L, -2, "SEVERITY_NUMBER_TRACE4");
    lua_pushnumber(L, 5);
    lua_setfield(L, -2, "SEVERITY_NUMBER_DEBUG");
    lua_pushnumber(L, 6);
    lua_setfield(L, -2, "SEVERITY_NUMBER_DEBUG2");
    lua_pushnumber(L, 7);
    lua_setfield(L, -2, "SEVERITY_NUMBER_DEBUG3");
    lua_pushnumber(L, 8);
    lua_setfield(L, -2, "SEVERITY_NUMBER_DEBUG4");
    lua_pushnumber(L, 9);
    lua_setfield(L, -2, "SEVERITY_NUMBER_INFO");
    lua_pushnumber(L, 10);
    lua_setfield(L, -2, "SEVERITY_NUMBER_INFO2");
    lua_pushnumber(L, 11);
    lua_setfield(L, -2, "SEVERITY_NUMBER_INFO3");
    lua_pushnumber(L, 12);
    lua_setfield(L, -2, "SEVERITY_NUMBER_INFO4");
    lua_pushnumber(L, 13);
    lua_setfield(L, -2, "SEVERITY_NUMBER_WARN");
    lua_pushnumber(L, 14);
    lua_setfield(L, -2, "SEVERITY_NUMBER_WARN2");
    lua_pushnumber(L, 15);
    lua_setfield(L, -2, "SEVERITY_NUMBER_WARN3");
    lua_pushnumber(L, 16);
    lua_setfield(L, -2, "SEVERITY_NUMBER_WARN4");
    lua_pushnumber(L, 17);
    lua_setfield(L, -2, "SEVERITY_NUMBER_ERROR");
    lua_pushnumber(L, 18);
    lua_setfield(L, -2, "SEVERITY_NUMBER_ERROR2");
    lua_pushnumber(L, 19);
    lua_setfield(L, -2, "SEVERITY_NUMBER_ERROR3");
    lua_pushnumber(L, 20);
    lua_setfield(L, -2, "SEVERITY_NUMBER_ERROR4");
    lua_pushnumber(L, 21);
    lua_setfield(L, -2, "SEVERITY_NUMBER_FATAL");
    lua_pushnumber(L, 22);
    lua_setfield(L, -2, "SEVERITY_NUMBER_FATAL2");
    lua_pushnumber(L, 23);
    lua_setfield(L, -2, "SEVERITY_NUMBER_FATAL3");
    lua_pushnumber(L, 24);
    lua_setfield(L, -2, "SEVERITY_NUMBER_FATAL4");
    // define metatable on main table
    lua_newtable(L);
    lua_pushcfunction(L, lua_protobuf_enum_index);
    lua_setfield(L, -2, "__index");
    lua_setmetatable(L, -2);
    
    // define metatable on proxy table
    lua_newtable(L);
    lua_pushvalue(L, -2);
    lua_setfield(L, -2, "__index");
    lua_pushcfunction(L, lua_protobuf_enum_newindex);
    lua_setfield(L, -2, "__newindex");
    lua_remove(L, -2);
    lua_setmetatable(L, -2);
    lua_setfield(L, -2, "SeverityNumber");
    // end SeverityNumber enum
    // LogRecordFlags enum
    lua_newtable(L); // proxy table
    lua_newtable(L); // main table
    lua_pushnumber(L, 0);
    lua_setfield(L, -2, "LOG_RECORD_FLAGS_DO_NOT_USE");
    lua_pushnumber(L, 255);
    lua_setfield(L, -2, "LOG_RECORD_FLAGS_TRACE_FLAGS_MASK");
    // define metatable on main table
    lua_newtable(L);
    lua_pushcfunction(L, lua_protobuf_enum_index);
    lua_setfield(L, -2, "__index");
    lua_setmetatable(L, -2);
    
    // define metatable on proxy table
    lua_newtable(L);
    lua_pushvalue(L, -2);
    lua_setfield(L, -2, "__index");
    lua_pushcfunction(L, lua_protobuf_enum_newindex);
    lua_setfield(L, -2, "__newindex");
    lua_remove(L, -2);
    lua_setmetatable(L, -2);
    lua_setfield(L, -2, "LogRecordFlags");
    // end LogRecordFlags enum
    lua_pop(L, 1);
    luaL_Reg funcs [] = { { NULL, NULL } };
    luaL_register(L, "protobuf.opentelemetry.proto.logs.v1", funcs);
    lua_pop(L, 1);
    lua_protobuf_opentelemetry_proto_logs_v1_LogsData_open(L);
    lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_open(L);
    lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_open(L);
    lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_open(L);
    return 1;
}


static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_LogsData__functions [] = {
    {"new", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_new},
    {"parsefromstring", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_LogsData__methods [] = {
    {"serialized", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_serialized},
    {"clear", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_clear},
    {"__gc", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_gc},
    {"clear_resource_logs", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_clear_resource_logs},
    {"get_resource_logs", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_get_resource_logs},
    {"set_resource_logs", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_set_resource_logs},
    {"size_resource_logs", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_size_resource_logs},
    {"add_resource_logs", lua_protobuf_opentelemetry_proto_logs_v1_LogsData_add_resource_logs},
    {NULL, NULL},
};

int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, lua_protobuf_opentelemetry_proto_logs_v1_LogsData__methods);
    luaL_register(L, "protobuf.opentelemetry.proto.logs.v1.LogsData", lua_protobuf_opentelemetry_proto_logs_v1_LogsData__functions);
    lua_pop(L, 1);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_opentelemetry_proto_logs_v1_LogsData_pushcopy(lua_State *L, const ::opentelemetry::proto::logs::v1::LogsData &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::LogsData(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_opentelemetry_proto_logs_v1_LogsData_pushreference(lua_State *L, ::opentelemetry::proto::logs::v1::LogsData *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::LogsData();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::opentelemetry::proto::logs::v1::LogsData * msg = new ::opentelemetry::proto::logs::v1::LogsData();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_clear_resource_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    m->clear_resource_logs();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_get_resource_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->resource_logs_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->resource_logs_size());
    }
    ::opentelemetry::proto::logs::v1::ResourceLogs * got_msg = m->mutable_resource_logs(index-1);
    lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_set_resource_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->resource_logs_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_size_resource_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    int size = m->resource_logs_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogsData_add_resource_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogsData");
    ::opentelemetry::proto::logs::v1::LogsData *m = (::opentelemetry::proto::logs::v1::LogsData *)mud->msg;
    ::opentelemetry::proto::logs::v1::ResourceLogs *msg_new = m->add_resource_logs();
    lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs__functions [] = {
    {"new", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_new},
    {"parsefromstring", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs__methods [] = {
    {"serialized", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_serialized},
    {"clear", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear},
    {"__gc", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_gc},
    {"clear_resource", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear_resource},
    {"get_resource", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_get_resource},
    {"set_resource", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_set_resource},
    {"has_resource", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_has_resource},
    {"clear_scope_logs", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear_scope_logs},
    {"get_scope_logs", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_get_scope_logs},
    {"set_scope_logs", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_set_scope_logs},
    {"size_scope_logs", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_size_scope_logs},
    {"add_scope_logs", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_add_scope_logs},
    {"clear_schema_url", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear_schema_url},
    {"get_schema_url", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_get_schema_url},
    {"set_schema_url", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_set_schema_url},
    {NULL, NULL},
};

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs__methods);
    luaL_register(L, "protobuf.opentelemetry.proto.logs.v1.ResourceLogs", lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs__functions);
    lua_pop(L, 1);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_pushcopy(lua_State *L, const ::opentelemetry::proto::logs::v1::ResourceLogs &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::ResourceLogs(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_pushreference(lua_State *L, ::opentelemetry::proto::logs::v1::ResourceLogs *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::ResourceLogs();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::opentelemetry::proto::logs::v1::ResourceLogs * msg = new ::opentelemetry::proto::logs::v1::ResourceLogs();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear_resource(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    m->clear_resource();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_get_resource(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    if (!m->has_resource()) {
        lua_pushnil(L);
    }
    ::opentelemetry::proto::resource::v1::Resource * got_msg = m->mutable_resource();
    lua_protobuf_opentelemetry_proto_resource_v1_Resource_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_set_resource(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_resource();
        return 0;
    }
    
    return luaL_error(L, "to manipulate embedded messages, obtain the embedded message and manipulate it");
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_has_resource(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    lua_pushboolean(L, m->has_resource());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear_scope_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    m->clear_scope_logs();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_get_scope_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->scope_logs_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->scope_logs_size());
    }
    ::opentelemetry::proto::logs::v1::ScopeLogs * got_msg = m->mutable_scope_logs(index-1);
    lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_set_scope_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->scope_logs_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_size_scope_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    int size = m->scope_logs_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_add_scope_logs(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    ::opentelemetry::proto::logs::v1::ScopeLogs *msg_new = m->add_scope_logs();
    lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_clear_schema_url(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    m->clear_schema_url();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_get_schema_url(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    string s = m->schema_url();
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ResourceLogs_set_schema_url(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ResourceLogs");
    ::opentelemetry::proto::logs::v1::ResourceLogs *m = (::opentelemetry::proto::logs::v1::ResourceLogs *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_schema_url();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_schema_url(s, len);
    return 0;
}

static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs__functions [] = {
    {"new", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_new},
    {"parsefromstring", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs__methods [] = {
    {"serialized", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_serialized},
    {"clear", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear},
    {"__gc", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_gc},
    {"clear_scope", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear_scope},
    {"get_scope", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_get_scope},
    {"set_scope", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_set_scope},
    {"has_scope", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_has_scope},
    {"clear_log_records", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear_log_records},
    {"get_log_records", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_get_log_records},
    {"set_log_records", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_set_log_records},
    {"size_log_records", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_size_log_records},
    {"add_log_records", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_add_log_records},
    {"clear_schema_url", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear_schema_url},
    {"get_schema_url", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_get_schema_url},
    {"set_schema_url", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_set_schema_url},
    {NULL, NULL},
};

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs__methods);
    luaL_register(L, "protobuf.opentelemetry.proto.logs.v1.ScopeLogs", lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs__functions);
    lua_pop(L, 1);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_pushcopy(lua_State *L, const ::opentelemetry::proto::logs::v1::ScopeLogs &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::ScopeLogs(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_pushreference(lua_State *L, ::opentelemetry::proto::logs::v1::ScopeLogs *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::ScopeLogs();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::opentelemetry::proto::logs::v1::ScopeLogs * msg = new ::opentelemetry::proto::logs::v1::ScopeLogs();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear_scope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    m->clear_scope();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_get_scope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    if (!m->has_scope()) {
        lua_pushnil(L);
    }
    ::opentelemetry::proto::common::v1::InstrumentationScope * got_msg = m->mutable_scope();
    lua_protobuf_opentelemetry_proto_common_v1_InstrumentationScope_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_set_scope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_scope();
        return 0;
    }
    
    return luaL_error(L, "to manipulate embedded messages, obtain the embedded message and manipulate it");
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_has_scope(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    lua_pushboolean(L, m->has_scope());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear_log_records(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    m->clear_log_records();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_get_log_records(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->log_records_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->log_records_size());
    }
    ::opentelemetry::proto::logs::v1::LogRecord * got_msg = m->mutable_log_records(index-1);
    lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_set_log_records(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->log_records_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_size_log_records(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    int size = m->log_records_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_add_log_records(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    ::opentelemetry::proto::logs::v1::LogRecord *msg_new = m->add_log_records();
    lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_clear_schema_url(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    m->clear_schema_url();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_get_schema_url(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    string s = m->schema_url();
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_ScopeLogs_set_schema_url(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.ScopeLogs");
    ::opentelemetry::proto::logs::v1::ScopeLogs *m = (::opentelemetry::proto::logs::v1::ScopeLogs *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_schema_url();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_schema_url(s, len);
    return 0;
}

static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_LogRecord__functions [] = {
    {"new", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_new},
    {"parsefromstring", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_parsefromstring},
    {NULL, NULL}
};

static const struct luaL_Reg lua_protobuf_opentelemetry_proto_logs_v1_LogRecord__methods [] = {
    {"serialized", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_serialized},
    {"clear", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear},
    {"__gc", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_gc},
    {"clear_time_unix_nano", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_time_unix_nano},
    {"get_time_unix_nano", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_time_unix_nano},
    {"set_time_unix_nano", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_time_unix_nano},
    {"clear_observed_time_unix_nano", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_observed_time_unix_nano},
    {"get_observed_time_unix_nano", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_observed_time_unix_nano},
    {"set_observed_time_unix_nano", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_observed_time_unix_nano},
    {"clear_severity_number", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_severity_number},
    {"get_severity_number", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_severity_number},
    {"set_severity_number", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_severity_number},
    {"clear_severity_text", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_severity_text},
    {"get_severity_text", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_severity_text},
    {"set_severity_text", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_severity_text},
    {"clear_body", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_body},
    {"get_body", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_body},
    {"set_body", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_body},
    {"has_body", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_has_body},
    {"clear_attributes", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_attributes},
    {"get_attributes", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_attributes},
    {"set_attributes", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_attributes},
    {"size_attributes", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_size_attributes},
    {"add_attributes", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_add_attributes},
    {"clear_dropped_attributes_count", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_dropped_attributes_count},
    {"get_dropped_attributes_count", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_dropped_attributes_count},
    {"set_dropped_attributes_count", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_dropped_attributes_count},
    {"clear_flags", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_flags},
    {"get_flags", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_flags},
    {"set_flags", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_flags},
    {"clear_trace_id", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_trace_id},
    {"get_trace_id", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_trace_id},
    {"set_trace_id", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_trace_id},
    {"clear_span_id", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_span_id},
    {"get_span_id", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_span_id},
    {"set_span_id", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_span_id},
    {NULL, NULL},
};

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_open(lua_State *L)
{
    luaL_newmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    lua_pushvalue(L, -1);
    lua_setfield(L, -2, "__index");
    luaL_register(L, NULL, lua_protobuf_opentelemetry_proto_logs_v1_LogRecord__methods);
    luaL_register(L, "protobuf.opentelemetry.proto.logs.v1.LogRecord", lua_protobuf_opentelemetry_proto_logs_v1_LogRecord__functions);
    lua_pop(L, 1);
    lua_pop(L, 1);
    return 1;
}


bool lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_pushcopy(lua_State *L, const ::opentelemetry::proto::logs::v1::LogRecord &from)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::LogRecord(from);
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    lua_setmetatable(L, -2);
    return true;
}
bool lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_pushreference(lua_State *L, ::opentelemetry::proto::logs::v1::LogRecord *msg, lua_protobuf_gc_callback f, void *data)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = false;
    ud->msg = msg;
    ud->gc_callback = f;
    ud->callback_data = data;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    lua_setmetatable(L, -2);
    return true;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_new(lua_State *L)
{
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = new ::opentelemetry::proto::logs::v1::LogRecord();
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    lua_setmetatable(L, -2);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_parsefromstring(lua_State *L)
{
    if (lua_gettop(L) != 1) {
        return luaL_error(L, "parsefromstring() requires a string argument. none given");
    }
    size_t len;
    const char *s = luaL_checklstring(L, -1, &len);
    ::opentelemetry::proto::logs::v1::LogRecord * msg = new ::opentelemetry::proto::logs::v1::LogRecord();
    if (!msg->ParseFromArray((const void *)s, len)) {
        return luaL_error(L, "error deserializing message");
    }
    msg_udata * ud = (msg_udata *)lua_newuserdata(L, sizeof(msg_udata));
    ud->lua_owns = true;
    ud->msg = msg;
    ud->gc_callback = NULL;
    ud->callback_data = NULL;
    luaL_getmetatable(L, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    lua_setmetatable(L, -2);
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_gc(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (mud->lua_owns) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    if (mud->gc_callback && mud->gc_callback(m, mud->callback_data)) {
        delete mud->msg;
        mud->msg = NULL;
        return 0;
    }
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->Clear();
    return 0;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_serialized(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    string s;
    if (!m->SerializeToString(&s)) {
        return luaL_error(L, "error serializing message");
    }
    lua_pushlstring(L, s.c_str(), s.length());
    return 1;
}
int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_time_unix_nano(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_time_unix_nano();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_time_unix_nano(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    lua_pushinteger(L, m->time_unix_nano());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_time_unix_nano(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_time_unix_nano();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_time_unix_nano(i);
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_observed_time_unix_nano(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_observed_time_unix_nano();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_observed_time_unix_nano(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    lua_pushinteger(L, m->observed_time_unix_nano());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_observed_time_unix_nano(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_observed_time_unix_nano();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_observed_time_unix_nano(i);
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_severity_number(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_severity_number();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_severity_number(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    lua_pushinteger(L, m->severity_number());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_severity_number(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_severity_number();
        return 0;
    }
    
    lua_Integer i = luaL_checkinteger(L, 2);
    m->set_severity_number((::opentelemetry::proto::logs::v1::SeverityNumber)i);
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_severity_text(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_severity_text();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_severity_text(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    string s = m->severity_text();
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_severity_text(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_severity_text();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_severity_text(s, len);
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_body(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_body();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_body(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (!m->has_body()) {
        lua_pushnil(L);
    }
    ::opentelemetry::proto::common::v1::AnyValue * got_msg = m->mutable_body();
    lua_protobuf_opentelemetry_proto_common_v1_AnyValue_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_body(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_body();
        return 0;
    }
    
    return luaL_error(L, "to manipulate embedded messages, obtain the embedded message and manipulate it");
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_has_body(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    lua_pushboolean(L, m->has_body());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_attributes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_attributes();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_attributes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_gettop(L) != 2) {
        return luaL_error(L, "missing required numeric argument");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    if (index < 1 || index > m->attributes_size()) {
        return luaL_error(L, "index must be between 1 and current size: %d", m->attributes_size());
    }
    ::opentelemetry::proto::common::v1::KeyValue * got_msg = m->mutable_attributes(index-1);
    lua_protobuf_opentelemetry_proto_common_v1_KeyValue_pushreference(L, got_msg, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_attributes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_gettop(L) != 3) {
            return luaL_error(L, "required 2 arguments not passed to function");
    }
    lua_Integer index = luaL_checkinteger(L, 2);
    int current_size = m->attributes_size();
    if (index < 1 || index > current_size + 1) {
        return luaL_error(L, "index must be between 1 and %d", current_size + 1);
    }
    if (lua_isnil(L, 3)) {
        return luaL_error(L, "cannot assign nil to repeated fields (yet)");
    }
    return luaL_error(L, "to manipulate embedded messages, fetch the embedded message and modify it");
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_size_attributes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    int size = m->attributes_size();
    lua_pushinteger(L, size);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_add_attributes(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    ::opentelemetry::proto::common::v1::KeyValue *msg_new = m->add_attributes();
    lua_protobuf_opentelemetry_proto_common_v1_KeyValue_pushreference(L, msg_new, NULL, NULL);
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_dropped_attributes_count(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_dropped_attributes_count();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_dropped_attributes_count(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    lua_pushinteger(L, m->dropped_attributes_count());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_dropped_attributes_count(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_dropped_attributes_count();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_dropped_attributes_count(v);
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_flags(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_flags();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_flags(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    lua_pushinteger(L, m->flags());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_flags(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_flags();
        return 0;
    }
    
    lua_Integer v = luaL_checkinteger(L, 2);
    m->set_flags(v);
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_trace_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_trace_id();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_trace_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    string s = m->trace_id();
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_trace_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_trace_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_trace_id(s, len);
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_clear_span_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    m->clear_span_id();
    return 0;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_get_span_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    string s = m->span_id();
    lua_pushlstring(L, s.c_str(), s.size());
    return 1;
}

int lua_protobuf_opentelemetry_proto_logs_v1_LogRecord_set_span_id(lua_State *L)
{
    msg_udata * mud = (msg_udata *)luaL_checkudata(L, 1, "protobuf_.opentelemetry.proto.logs.v1.LogRecord");
    ::opentelemetry::proto::logs::v1::LogRecord *m = (::opentelemetry::proto::logs::v1::LogRecord *)mud->msg;
    if (lua_isnil(L, 2)) {
        m->clear_span_id();
        return 0;
    }
    
    if (!lua_isstring(L, 2)) return luaL_error(L, "passed value is not a string");
    size_t len;
    const char *s = lua_tolstring(L, 2, &len);
    if (!s) {
        luaL_error(L, "could not obtain string on stack. weird");
    }
    m->set_span_id(s, len);
    return 0;
}
